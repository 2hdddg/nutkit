@startuml
participant "TeamCity\nResponsible for repo cloning and triggering" as TeamCity
participant "Agent\nTeamCity agent or other host\nRequires: Python >= 3.6 + Docker >= 19.03\nRepositories: testkit + driver + stub server" as Agent
participant "Runner\nDocker container\nImage container: Python >= 3.6 + Go + TLS binaries" as Runner
participant "Driver\nDocker container\nImage contains: Python >= 3.6 + driver SDK\nMounts: repositories on Agent" as Driver
participant "Neo4j\nDocker container\nDifferent versions\nSingle instance or cluster\nCommunity or enterprise" as Neo4j
hide footbox

TeamCity -> Agent: Clone repositories on agent
note right of TeamCity
All repositories should follow the same branches.

Driver branch: 4.1 -> Test kit branch: 4.1
end note

TeamCity -> Agent: Invoke main entry point in testkit repository in build step
note right of TeamCity
Environment variables needs to be set before invoking script to
specify location of the cloned repositories and name of driver
docker image.

When running on local host these environment variables needs
to be set to locally cloned repositores and a locally pulled
docker image.
end note

note right of Agent
Everything below is orchestrated by main entry point in test kit repository
end note

Agent -> Driver: Start docker container
Agent -> Driver: Build driver & test backend

Agent -> Runner: Start docker container
Agent -> Runner: Build tools needed

||50||
== Unit tests  == 
Agent -> Driver: Run unit tests
note left of Driver
Unit tests are written in driver native language.
end note

||50||
== Stub tests  == 
Agent -> Driver: Start test backend
Agent -> Runner: Run stub test suite
loop for each test in suite
Runner -> Runner: Start stub server(s)
Runner -> Driver: { Test specific requests to test backend}
Driver -> Runner: { Bolt protocol }
end


||50||
== Integration tests: Server 4.0, single instance, enterprise  ==
Agent -> Driver: Start test backend
Agent -> Neo4j: Start docker container with specified version
Agent -> Runner: Run test suite matching Neo4j instance
loop for each test in suite
Runner -> Driver: { Test specific requests to test backend}
Driver -> Neo4j: { Bolt protocol }
end
Agent -> Driver: Run legacy integration tests
note left of Driver
Environment variables are set to specify Neo4j URI,
username, password, edition
end note
Driver -> Neo4j: { Bolt protocol }
Agent -> Driver: Run stress tests
Driver -> Neo4j: { Bolt protocol }
Agent -> Neo4j: Stop docker container

||50||
== Integration tests: Server 4.1, cluser, enterprise  ==
note right of Agent
Same as above but with a different database version and
possibly a different test suite 
end note

||50||
== Connectivity tests  ==
loop for each test in suite
note right of Agent
Build different kinds of Docker networks like IpV6, modify CAs on driver image, Kerberos...
end note
Agent -> Runner: Run connectivity suite
Runner -> Driver: { Test specific requests to test backend}
Driver -> Runner: { Bolt protocol }
end note


||50||
@enduml
